# changed from https://spin.atomicobject.com/2016/08/26/makefile-c-projects/

TARGET_EXEC ?= a.out
BUILD_TYPE ?= debug
BUILD_DIR ?= build
SRC_DIRS ?= .
ISYSTEM_DIRS ?=
I_DIRS ?=
L_DIRS ?=
LIBS ?=

# find all *.cpp, *.c, *.cxx, *.s files in source dirs
SRCS := $(shell find $(SRC_DIRS) -regex ".*\.\(cpp\|.c\|.cxx\|*.s\)" | sed 's/^\.\///')

# map from *.cpp to ./build/*.cpp.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# map from ./build/*.cpp.o to ./build/*.cpp.d
DEPS := $(OBJS:.o=.d)

# -MMD create non system headfile dependency rule(use -MD if you also need
#  system heads ) for *.cpp to *.cpp.d in the same dir as *.o
# -MP add PHONY to headfile in dependency in case you delete it and make complains.
CPPFLAGS ?= $(INCLUDE_FLAGS) $(LIBRARY_INCLUDE_FLAGS) -MMD -MP

ifeq ($(BUILD_TYPE), debug)
# default to debug build, include macro info
CXXFLAGS ?= -g3 -gdwarf -DDEBUG -D_DEBUG 
else ifeq ($(BUILD_TYPE), relwithdebinfo)
CXXFLAGS ?= -O2 -g -DNDEBUG
else ifeq ($(BUILD_TYPE), release)
CXXFLAGS ?= -O3
else ifeq ($(BUILD_TYPE), minsizerel)
CXXFLAGS ?= -Os
endif

I_DIRS += $(shell find $(SRC_DIRS) -mindepth 1 -name .vim -prune -or -type d -print | sed 's/^.\///')
INCLUDE_FLAGS := $(addprefix -I,$(I_DIRS)) $(addprefix -isystem,$(ISYSTEM_DIRS))

LDFLAGS := $(addprefix -L,$(L_DIRS))
LDLIBS := $(addprefix -l,$(LIBS))

.PHONY: all
all: $(BUILD_DIR)/$(TARGET_EXEC)


$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CXX) $(OBJS) -o $@ $(LDFLAGS) $(LDLIBS)

# assembly
$(BUILD_DIR)/%.s.o: %.s Makefile | $(BUILD_DIR)
	$(AS) $(ASFLAGS) -c $< -o $@

# c source
$(BUILD_DIR)/%.c.o: %.c Makefile | $(BUILD_DIR)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp Makefile | $(BUILD_DIR)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR):
	$(MKDIR_P) $(BUILD_DIR)

.PHONY: clean

clean:
	find ${BUILD_DIR} \( -name '*.[oad]' -or -name '*.out' -or -name '*.so.*' \) -delete

# include dependency rules generated by compiler
-include $(DEPS)

MKDIR_P ?= mkdir -p
