# vim:set filetype=sh foldmethod=marker :

# disable flow control
stty -ixon

[ -f ~/.bash_aliases ] && . ~/.bash_aliases

if [ -s ~/.vim/plugged/gruvbox/gruvbox_256palette.sh ] ; then
    . ~/.vim/plugged/gruvbox/gruvbox_256palette.sh
fi

if [[ -s /opt/vlab-4.4.1/bin/sourceme.sh ]]; then
    source /opt/vlab-4.4.1/bin/sourceme.sh
fi

# sync vim local dir {{{1
cdv()
{
  printf '\033]51;["call", "Tapi_lcd", ["%s"]]\007' "$PWD"
}

cd_and_cdv()
{
  'cd' "$@" && cdv
}

hookvim()
{
    alias cd=cd_and_cdv
}

vp()
{
    if [ -f .dedowsdi/proj.sh ]; then
        .dedowsdi/proj.sh "$@"
    else
        vim "$@"
    fi
}

run_cmake()
{
    local script=$( find . -type d \( -name .git -or -name .clangd -or -name .hg -prune \) -or \
        -type f -name 'cmake.sh' -exec {} \; )
    if [[ -n $script ]]; then
        "$script"
    else
        mycmake
    fi
}

# vgdb cmd args

swapfile()
{
    tmp_swap_file=tmp.$$
    mv "$1" $tmp_swap_file && mv "$2" "$1" && mv $tmp_swap_file "$2"
}

if [ ! -z "$VIM_TERMINAL" ]; then
   hookvim
fi

# awk literal replace.
gsub_literal() {
  # STR cannot be empty
  [[ "$1" ]] || return

  # string manip needed to escape '\'s, so awk doesn't expand '\n' and such
  awk -v str="${1//\\/\\\\}" -v rep="${2//\\/\\\\}" '
    # get the length of the search string
    BEGIN {
      len = length(str);
    }

    {
      # empty the output string
      out = "";

      # continue looping while the search string is in the line
      while (i = index($0, str)) {
        # append everything up to the search string, and the replacement string
        out = out substr($0, 1, i-1) rep;

        # remove everything up to and including the first instance of the
        # search string from the line
        $0 = substr($0, i + len);
      }

      # append whatever is left
      out = out $0;

      print out;
    }
  '
}
