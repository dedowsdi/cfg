#!/usr/bin/env bash

set -eu -o pipefail

show_usage()
{
    echo "
  Usage: ${0##*/} [-t TAGFILE]... [-k KIND]... <scope_name>

  Read from everything that have a scope. Your tag fields must include
  \"Z\" for this to work.

  Options:
    -h          Show this help.

    -t TAGFILE  Add tag file, can be used zero or multiple times. Use ./tags if
                none is provided.

    -k KIND     Restrict kind, can be specified zero or multiple times.

    -o          Only print names.

  All other options except -Q are forwarded to readtags.
"
}

tags=()
kinds=()
extra_options=()

while getopts ":ht:k:Q:o" opt; do
    case $opt in
        h)
            show_usage
            exit 0
            ;;

        t)
            tags+=("$OPTARG")
            ;;

        k)
            kinds+=("$OPTARG")
            ;;

        o)
            name_only=
            ;;

        Q)
            echo -e "\n  Can't pass extra -Q to readtags.\n"
            usage
            exit 1
            ;;

        *)
            extra_options+=("-$OPTARG")
            ;;
    esac
done
shift $((OPTIND-1))

scope_name=${1:-}

if [[ -z "$scope_name" ]]; then
    show_usage
    exit 1
fi

# use tags if no -t exists
if [[ ${#tags[@]} -eq 0 ]]; then
    tags=(tags)
fi

# TODO use (member $kind list) instead of or, don't know how to construct list.
kinds_condition=$(printf "(prefix? \$kind \"%s\") " "${kinds[@]}")

condition="(and
           (or $kinds_condition)
           (eq? \$scope-name \"$scope_name\")
           )"

for tagfile in "${tags[@]}" ; do

    # need to test result as readtags exit with 0 when nothing found
    mapfile -t results < <(readtags "${extra_options[@]}" -t "$tagfile" -Q "${condition}" -l)
    if [[ ${#results[@]} -gt 0 ]]; then
        if [[ -v name_only ]]; then
            printf "%s\n" "${results[@]}" | cut -f 1
        else
            printf "%s\n" "${results[@]}"
        fi
        exit 0
    fi
done
