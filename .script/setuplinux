#!/bin/bash

# set -o errexit
set -o nounset

PROG_NAME=$0
APACHE_WEB=/var/www/html
RC=$HOME/.linuxrc
GIT_SOURCE=/usr/local/source
DOWNLOAD="$HOME/.setup_download"
LOG="$HOME/setup_log"
ESSENTIAL_LOG="$LOG/essential.log"
APT_LOG="$LOG/apt.log"
PIP_LOG="$LOG/pip.log"
DOWNLOAD_LOG="$LOG/download.log"
REPO_LOG="$LOG/repo.log"
WEB_LOG="$LOG/web.log"

show_usage()
{
    echo "Prerequisite:"
    echo ""
    echo "    git clone --bare https://github.com/dedowsdi/dotfiles .dotfiles"
    echo "    git --git-dir=.dotfiles --word-tree=. checkout ."
    echo ""
    echo "    Due to poor internet, you must manually do operations that"
    echo "    relies on downloaded files ($DOWNLOAD)."
    echo ""
    echo "    Written for ubuntu18.04.3"
    echo ""
    echo "    Must be called as normal user"
    echo ""
    echo "Usage:"
    echo ""
    echo "    $PROG_NAME -{heoapdr}"
    echo ""
    echo "    -h show this help"
    echo ""
    echo "    -e install essential, fast setup, log to $ESSENTIAL_LOG"
    echo ""
    echo "    -o install everything except essential"
    echo ""
    echo "    -a install apt, log to $APT_LOG"
    echo ""
    echo "    -p install pip apt, log to $PIP_LOG"
    echo ""
    echo "    -d download, log to $DOWNLOAD_LOG"
    echo ""
    echo "    -r clone repo, log to $REPO_LOG"
    echo ""
    echo "Issue:"
    echo ""
    echo "    you might need to manually clear nvm stuff at the end of .bashrc,"
    echo "    it's already included in .profile and .zxdBashrc"
}

if [[ $USER == "root" ]]; then
    show_usage
    exit 1
fi

mkdir -p "$LOG" "$DOWNLOAD" "$GIT_SOURCE"

elem_in()
{
    if [[ $# -lt 2 ]]; then
        echo "wrong arg, is should be $0 item list"
        return 1
    fi

    local elem=$1
    local list=("${@:2}")
    for item in "${list[@]}"; do [[ "$item" == "$elem" ]] && exit 0; done
    return 1
}

read_data()
{
    grep -E '^\s*[^# \t]' "$1"
}

install_ppa()
{
    while IFS= read -r address ; do
        grep -qF "${address:4}" -r /etc/apt/sources.list.d && continue

        sudo apt-add-repository -y "$address"
        new_ppa=
    done< <(read_data "${RC}/ppa")

    if [[ -v new_ppa ]]; then
        sudo apt update
    fi
}

command_exist()
{
    >/dev/null 2>&1 command -v "$1"
}

install_essential()
{
    # Failed to login after reboot, log says no permission for /dev/fb0, had to add self to video group, but not always work.
    sudo usermod -a -G video "$USER"

    # It's said it's caused by rootless X (https://wiki.archlinux.org/index.php/xorg#Rootless_Xorg), we disable it here. ( No longer needed after install nvidia
    # driver? )
    #
    # if grep -q needs_root_rights /etc/X11/Xwrapper.config ; then
    #     >>/etc/X11/Xwrapper.config echo 'needs_root_rights=yes'
    # fi

    sudo apt -y install build-essential git mercurial curl wget

    # chinese input method
    # Open "Language support", add simplified chinese
    # Open "settings/Region & Language", add this to input source
    # You can change keyboard shortcut in keyboard
    sudo apt -y install ibus-sunpinyin

    install_ppa

    # urxvt
    if ! command_exist urxvt ; then
        sudo apt -y install rxvt-unicode-256color xfonts-terminus
        sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator /usr/bin/urxvtc 100

        # copy resize-font and fullscreen to ~/.urxvt/ext
        mkdir -p ~/.urxvt/ext
    fi

    # apt tmux is old, you might want to purge this and build from source
    if ! command_exist tmux ; then
        sudo apt -y install tmux figlet
    fi

    # apt vim is pretty old, you should purge this and build from source
    if ! command_exist vim ; then
        sudo apt -y install vim clipit xclip
        mkdir -p ~/.vimbak ~/.vimundo ~/.vimswap
        mkdir -p ~/.config/nvim/autoload
        mkdir -p ~/.config/nvim/plugged
    fi

    # zsh
    if ! command_exist zsh ; then
        sudo apt -y install zsh zsh-doc
        # install oh-my-zsh.sh
        # make sure ~/.oh-my-zsh doesn't exist
        # execute oh-my-zsh.sh
        # restore .zshrc
    fi

    # bash
    if ! grep -q zxdBashrc ~/.bashrc ; then
        echo source ~/.zxdBashrc >>~/.bashrc
        source ~/.bashrc
    fi

    # manage window in commandline. (wmctrl is needed by urxvt-fullscreen)
    sudo apt -y install xdotool wmctrl

    # python
    sudo apt -y install python3-pip

    # node
    sudo apt -y install nodejs npm
    # install nvm

    # webserver
    sudo apt -y install ant apache2
    if ! [[ -f /etc/apache2/conf-available/fqdn.conf ]]; then
        echo "ServerName localhost" | sudo tee /etc/apache2/conf-available/fqdn.conf
        sudo a2enconf fqdn
        sudo service apache2 reload
    fi

    #change index.html to apache.html
    if [[ -f ${APACHE_WEB}/index.html ]]; then
        sudo mv ${APACHE_WEB}/index.html ${APACHE_WEB}/apache.html
    fi

    # https://github.com/Mayccoll/Gogh , change terminal color
    sudo apt -y install dconf-cli uuid-runtime
    # execute gosh.sh
}

install_optional()
{
    # no background, need job control
    install_apt  |& tee "$APT_LOG"
    install_pip  |& tee "$PIP_LOG"
    install_download |& tee "$DOWNLOAD_LOG"
    install_repo |& tee "$REPO_LOG"
    install_web  |& tee "$WEB_LOG"

    sudo ln -fs  /usr/bin/clangd-8 /usr/bin/clangd
}

install_apt()
{
    while read -r app ; do
        if  dpkg -l "$app" | tail -1 | grep -E '^ii' ; then
            echo "$app" already installed
        else
            echo installing "$app"
            sudo apt -y install "$app"
        fi
    done < <(read_data  "${RC}"/app)
}

install_pip()
{
    set -x
    piplist=$(pip3 list --format=columns)
    while read -r pkg ; do
        if elem_in "$pkg" "$piplist"; then
            echo "$pkg" exists
        else
            pip3 install "$pkg"
        fi
    done< <(read_data "${RC}/"pip3)
}

install_repo()
{
    cd "$GIT_SOURCE" || return 1
    while read -r cmd url output ; do
        if [[ $cmd == git ]]; then

            if [[ -z "$output" ]]; then
                output=${url##*/}
            fi

            if [[ -d "$output" ]]; then
                echo "skip $output"
                continue
            fi

            # make sure output is relative path. output will be removed if clone failed, it's dangerous to rm absolute path
            if [[ "$output" =~ ^/ ]]; then
                echo "skip absolute output $output"
                continue
            fi

            echo "cloning $output"

            # shallow clone. You can fetch revisions later with git fetch --depth=1000
            # or git fetch --unshallow
            sudo bash -c "{ git clone --progress --depth=1 \"$url\" \"$output\" || rm -rf \"$output\"
                            } > \"${output}.gitclone.log\" 2>&1 &"
        fi
    done < <(read_data  "${RC}"/repo)
}

install_download()
{
    cd "$DOWNLOAD" || exit 1
    while read -r url fname ; do
        if [[ -z "$fname" ]]; then
            fname=${url##*/}
        fi

        # continue download in background
        wget --tries=100 -cb "$url" -O "$fname" -o "$fname.wget.log"
    done < <(read_data  "${RC}/download")
}

install_web()
{
    while read -r filename link; do
        sudo ln -vfs "$filename" "$link"
    done< <(read_data "${RC}"/apache)
}

if [[ $# == 0 ]]; then
    show_usage
    exit 0
fi

while getopts "heoapdrw" opt; do
    case $opt in
        h)
            show_usage
            exit 0
            ;;

        e)
            install_essential |& tee "$ESSENTIAL_LOG"
            exit $?
            ;;

        o)
            install_optional
            exit $?
            ;;

        a)
            install_apt |& tee "$APT_LOG"
            exit $?
            ;;

        p)
            install_pip |& tee "$PIP_LOG"
            exit $?
            ;;

        d)
            install_download |& tee "$DOWNLOAD_LOG"
            exit $?
            ;;

        r)
            install_repo |& tee "$REPO_LOG"
            exit $?
            ;;

        w)
            install_web |& tee "$WEB_LOG"
            exit $?
            ;;

        *)
            echo -e "\n  Option does not exist : $OPTARG\n"
            usage; exit 1
            ;;
    esac
done
shift $((OPTIND-1))

exit 0
